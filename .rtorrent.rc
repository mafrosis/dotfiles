# This is mafro's resource file for rTorrent

# Maximum and minimum number of peers to connect to per torrent.
#min_peers = 40
#max_peers = 60

# Same as above but for seeding completed torrents (-1 = same as downloading)
#min_peers_seed = 10
#max_peers_seed = 30

# Maximum number of simultanious uploads per torrent.
#max_uploads = 10

# Global upload and download rate in KiB. "0" for unlimited.
#download_rate = 0
upload_rate = 30

# Default directory to save the downloaded torrents.
directory = /media/download/torrent

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = /media/download/.rtorrent/session

# create a default view (general) and bind to a group (grp1)
#view_add = general
#view_add = thebox
#view.persistent = general
#group.insert = grp1,general		# <name>,<view>

# insert another group which implicitly creates a view
group.insert_persistent_view = general
group.insert_persistent_view = thebox
group.insert_persistent_view = waffles

group.general.ratio.enable=
group.general.ratio.min.set=100
group.general.ratio.max.set=300
group.general.ratio.upload.set=20M

# create some throttle groups
throttle_up = general,10
throttle_up = thebox,40
throttle_up = waffles,40

# Watch a directory for new torrents, and stop those that have been deleted.
schedule = watch_dir_1,5,10,"load_start=/media/download/watch/general/*.torrent,view.set_visible=general,d.set_throttle_name=general"
schedule = watch_dir_3,5,10,"load_start=/media/download/watch/thebox/*.torrent,view.set_visible=thebox,d.set_throttle_name=thebox"
schedule = watch_dir_4,5,10,"load_start=/media/download/watch/waffles/*.torrent,view.set_visible=waffles,d.set_throttle_name=waffles"


#schedule = tied_directory,10,10,"start_tied=/media/data1/watch/*.torrent"
#schedule = untied_directory,10,10,"stop_untied="



# Close torrents when diskspace is low.
#schedule = low_diskspace,5,60,close_low_diskspace=100M

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60,stop_on_ratio=100,200M,200

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 29150-29159

# Start opening ports at a random position within the port range.
#port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#check_hash = no

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

# Max number of files to keep open simultaniously.
#max_open_files = 128

# Number of sockets to simultaneously keep open.
#max_open_sockets = <no default>


# Example of scheduling commands: Switch between two ip's every 5
# seconds.
#schedule = "ip_tick1,5,10,ip=torretta"
#schedule = "ip_tick2,10,10,ip=lampedusa"

# Remove a scheduled event.
#schedule_remove = "ip_tick1"
