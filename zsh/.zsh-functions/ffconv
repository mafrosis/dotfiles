#! /bin/zsh

USAGE='Usage: ffconv movie-file [-h] [-c INT] [-f] [-A]
  -c	manually set the CRF value
  -f	force a re-encode, even if already using H264/AAC streams
  -a	audio quality [0-100]
  -A	drop audio channel
  -T	don'"'"'t trash the input file
  -N	hide the dunzo message
  -W	resize to this horizontal pixel size
  -s	encode start time (in 0:01:23 time format)
  -d	encode duration (in seconds)
  -h	display this message

  Re-encode a movie to H264/MP4 using standard film presets'

if [[ $# -eq 0 ]]; then
	echo "$USAGE"
	return 1
fi

if [[ -x /usr/local/bin/gtouch ]]; then
	function touch {
		gtouch "$@"
	}
fi

CRF=21
FORCE=0
AUDIOQ=70
DROP_AUDIO=0
DONT_TRASH=0
NO_DUNZO=0
NEW_WIDTH=0
START_TIME=''
DURATION='9:00:00.00'
START=

while getopts 'c:fa:ATW:s:d:h:N' params
do
	case $params in
		c ) CRF=$OPTARG;;
		f ) FORCE=1;;
		a ) AUDIOQ=1;;
		A ) DROP_AUDIO=1;;
		T ) DONT_TRASH=1;;
		W ) NEW_WIDTH=$OPTARG;;
		s ) START_TIME=$OPTARG;;
		d ) DURATION=$OPTARG;;
		N ) NO_DUNZO=1;;
		h ) echo "$USAGE" && return 1;;
	esac
done
shift $((OPTIND-1))


# set NO_TRASH & NO_DUNZO on linux
if [[ $(uname) == 'Linux' ]]; then
	DONT_TRASH=1
	NO_DUNZO=1
fi


function fin() {
	local INPUT_FILE="$1"
	local OUTPUT_FILE="$2"

	# copy the EXIF date data
	DATE="$(exiftool -t -s -d "%Y-%m-%d %H:%M:%S" -MediaCreateDate -CreateDate -FileModifyDate "$INPUT_FILE" | awk '!/0000:00:00/ {print $2" "$3}' | head -1)"
	if [[ ! -z $DATE ]]; then
		echo "Setting EXIF timestamp to $DATE"
		exiftool "-AllDates=$DATE" -overwrite_original "$OUTPUT_FILE"
		touch -d "$DATE" "$OUTPUT_FILE"
	fi

	if [[ $NO_DUNZO -eq 0 ]]; then
		dunzo "Finished transcoding $OUTPUT_FILE" 'ffconv' "$PWD/$(dirname "$OUTPUT_FILE")"
	fi
	if [[ $DONT_TRASH -eq 0 ]]; then
		trash "$INPUT_FILE"
	fi
}


VCMD='-c:v copy'
ACMD='-c:a copy'

# analyse input file to determine existing stream types
META=$( ffprobe "$1" 2>&1 )
VCODEC=$( echo "$META" | awk '/Stream.*Video:/ {print $4}' )
ACODEC=$( echo "$META" | awk '/Stream.*Audio:/ {print $4}' )

# set the baseline deinterlace filter
VFILTER='-filter:v yadif'

# fade in movie at specified time
if [[ ! -z $START_TIME ]]; then
	START="-ss $START_TIME -t $DURATION"
	VFILTER="-filter:v 'yadif,fade=in:0:30'"
fi

# convert to H264
if [[ $VCODEC != 'h264' || ! -z $START || $NEW_WIDTH -gt 0 || $FORCE -eq 1 ]]; then
	VCMD="-c:v libx264 -tune film $VFILTER -crf $CRF"

	# resize movie
	if [[ $NEW_WIDTH -gt 0 ]]; then
		# extract movie resolution
		RESO=$( echo "$META" | awk '/Video:/ {print $10}' )
		if [[ ! $RESO =~ [0-9]+x[0-9]+ ]]; then
			RESO=$( echo "$META" | awk '/Video:/ {print $11}' | tr -d , )
		fi
		WIDTH=$( echo "$RESO" | cut -d x -f 1 )
		HEIGHT=$( echo "$RESO" | cut -d x -f 2 )

		# calculate new height
		TMP=$(( NEW_WIDTH * HEIGHT / WIDTH ))
		integer NEW_HEIGHT=$TMP
		# ensure is divisible by 2
		if [[ $(( NEW_HEIGHT % 2 )) -eq 1 ]]; then
			(( NEW_HEIGHT -= 1 ))
		fi

		VCMD="$VCMD -vf scale=$NEW_WIDTH:$NEW_HEIGHT"
	fi
fi

# completely drop audio
if [[ $DROP_AUDIO -eq 1 ]]; then
	ACMD='-an'
elif [[ $ACODEC != 'aac' ]]; then
	ACMD="-c:a aac -q:a $AUDIOQ"
fi

# include crf in output filename
if [[ ! $VCMD =~ (.*)copy$ ]]; then
	SUFFIX="-crf${CRF}"
elif [[ $1 =~ (.*)mp4$ ]]; then
	SUFFIX='-reenc'
fi

OUTFILE="${1%.*}${SUFFIX}.mp4"

# build FFMPEG command
FFMPEG="time ffmpeg $START -i \"$1\" $VCMD $ACMD \"$OUTFILE\""
echo "$FFMPEG"

# if either stream needs converting, or --force supplied
if [[ ! $VCMD =~ (.*)copy$ || ! $ACMD =~ (.*)copy$ || $FORCE -eq 1 ]]; then
	if eval "$FFMPEG"; then
		fin "$1" "$OUTFILE"
	fi

else
	# else if already MP4 do nothing
	if [[ $1 =~ (.*)mp4$ ]]; then
		print 'Nothing to do'
	else
		# switch container to MP4
		if /usr/local/bin/ffmpeg -i "$1" -c copy "${1%.*}.mp4"; then
			fin "$1" "$OUTFILE"
		fi
	fi
fi
