#! /bin/zsh
#
USAGE='Usage: ffconv movie-file [-h] [-c INT] [-f] [-A]
  -c	manually set the CRF value
  -f	force a re-encode, even if already using H264/AAC streams
  -A	drop audio channel
  -h	display this message

  Re-encode a movie to H264/MP4 using standard film presets'

if [[ $# -eq 0 ]]; then
	echo $USAGE
	return 1
fi

FORCE=0
DROP_AUDIO=0
CRF=21

while getopts 'fAc:h' params
do
	case $params in
		f ) FORCE=1;;
		A ) DROP_AUDIO=1;;
		c ) CRF=$OPTARG;;
		h ) echo "$USAGE" && return 1;;
	esac
done
shift $(($OPTIND-1))

if [[ $FORCE -eq 0 ]]; then
	# analyse input file to determine existing stream types
	VCODEC=$(ffprobe "$1" 2>&1 | awk '/Stream.*Video:/ {print $4}')
	ACODEC=$(ffprobe "$1" 2>&1 | awk '/Stream.*Audio:/ {print $4}')
fi

if [[ $VCODEC != 'h264' ]] || [[ $FORCE -eq 1 ]]; then
	# include crf in filename for MP4s, but only if it's not 21
	if [[ $1 =~ (.*)mp4$ ]]; then
		OUTPUT="${1%.*}"
		INCLUDE_CRF=1

	elif [[ ! $CRF -eq 21 ]]; then
		OUTPUT="$1"
		INCLUDE_CRF=1
	else
		OUTPUT="$1.mp4"
		INCLUDE_CRF=0
	fi
else
	OUTPUT="$1.mp4"
	INCLUDE_CRF=0
fi

# include crf
if [[ $INCLUDE_CRF -eq 1 ]]; then
	OUTPUT="${OUTPUT}-crf$CRF.mp4"
fi

# convert both video and audio
if [[ $VCODEC != 'h264' && $ACODEC != 'aac' ]] || [[ $FORCE -eq 1 ]]; then
	if [[ $DROP_AUDIO -eq 1 ]]; then
		time ffmpeg -i "$1" -c:v libx264 -filter:v yadif -crf $CRF -level 3.1 -tune film -an "$OUTPUT"
	else
		time ffmpeg -i "$1" -c:v libx264 -filter:v yadif -crf $CRF -level 3.1 -tune film -c:a libfaac -q:a 100 "$OUTPUT"
	fi

# convert just video
elif [[ $VCODEC != 'h264' ]]; then
	if [[ $DROP_AUDIO -eq 1 ]]; then
		time ffmpeg -i "$1" -c:v libx264 -filter:v yadif -crf $CRF -level 3.1 -tune film -an ""$OUTPUT
	else
		time ffmpeg -i "$1" -c:v libx264 -filter:v yadif -crf $CRF -level 3.1 -tune film -c:a copy "$OUTPUT"
	fi

# convert just audio
elif [[ $ACODEC != 'aac' ]]; then
	time ffmpeg -i "$1" -c:v copy -c:a libfaac -q:a 100 "$OUTPUT"

# do nothing for h264/aac MP4 input
elif [[ $1 == *mp4$ ]]; then
	print 'Nothing to do'

else
	# convert neither; just switch container to MP4
	time ffmpeg -i "$1" -c copy "$OUTPUT"
fi
